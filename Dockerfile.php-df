# ============================================================
#  STAGE 1 — Build PHP dependencies & prepare app
# ============================================================
FROM composer:2 AS vendor

WORKDIR /app

# Only copy composer files first for better caching
COPY composer.json composer.lock ./

# Install dependencies (no dev, no interaction)
RUN composer install \
    --no-dev \
    --no-interaction \
    --no-progress \
    --prefer-dist \
    --optimize-autoloader

# Copy the rest of your app source
COPY . .

# ============================================================
#  STAGE 2 — Build final PHP + Apache runtime image
# ============================================================
FROM php:8.4-apache AS runtime

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libfreetype6-dev \
    libjpeg62-turbo-dev \
    libpng-dev \
    libjpeg-dev \
    libzip-dev \
    libonig-dev \
    zlib1g-dev \
    libicu-dev \
    unzip \
    git \
    nano \
    cron \
    dos2unix \
    libcurl4-gnutls-dev \
    ca-certificates curl gnupg \
 && rm -rf /var/lib/apt/lists/*

# Enable Apache modules
RUN a2dissite 000-default.conf \
 && a2dismod autoindex -f \
 && a2enmod rewrite headers

# Copy Apache config files
COPY docker/apache/apache2site.conf /etc/apache2/sites-available/apache2site.conf
COPY docker/apache/apache2admin.conf /etc/apache2/sites-available/apache2admin.conf
COPY docker/apache/001default-apache2.conf /etc/apache2/sites-available/001default-apache2.conf
RUN a2ensite apache2site.conf apache2admin.conf 001default-apache2.conf

# Copy PHP config
COPY docker/php.ini /usr/local/etc/php/php.ini

# Build PHP extensions
RUN docker-php-ext-configure gd --with-freetype --with-jpeg --enable-gd \
 && docker-php-ext-install -j$(nproc) gd zip mbstring mysqli intl

# Set workdir
WORKDIR /var/www

# Copying files over
COPY docker/job-cron /etc/cron.d/job-cron
COPY docker/cron-minute.sh /var/www/cron-minute.sh
COPY docker/start-new.sh /var/www/start.sh

# Copy built vendor files from Stage 1 (composer cache preserved)
COPY --from=vendor /app/vendor ./vendor

# Copy app source (excluding files in .dockerignore)
COPY . .

# Cron setup
RUN chmod 0644 /etc/cron.d/job-cron /var/www/cron-minute.sh \
 && dos2unix /etc/cron.d/job-cron /var/www/cron-minute.sh \
 && crontab /etc/cron.d/job-cron \
 && touch /var/log/cron.log \
 && chmod 0777 /var/log/cron.log

# Setup start script
RUN dos2unix /var/www/start.sh \
 && chown -R www-data:www-data /var/www \
 && git config --global --add safe.directory /var/www \
 && mkdir -p /tmp/admin/43 \
 && chown -R www-data:www-data /tmp/admin \
 && apt-get clean && rm -rf /var/lib/apt/lists/*

CMD ["bash", "/var/www/start.sh"]