FROM php:8.4-fpm-alpine AS app

# 1️⃣ Install system dependencies and PHP extensions
RUN apk add --no-cache \
    bash \
    curl \
    git \
    nano \
    unzip \
    dos2unix \
    icu-dev \
    libpng-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    libzip-dev \
    oniguruma-dev \
    zlib-dev \
    libcurl \
    ca-certificates \
    busybox-suid \
    shadow \
    tzdata \
    # Cron
    cronie \
 && docker-php-ext-configure gd --with-freetype --with-jpeg \
 && docker-php-ext-install -j$(nproc) gd zip mbstring mysqli intl \
 && apk del --purge freetype-dev libjpeg-turbo-dev libpng-dev libzip-dev icu-dev oniguruma-dev zlib-dev \
 && rm -rf /var/cache/apk/*

# 2️⃣ Copy PHP configuration
COPY docker/php.ini /usr/local/etc/php/php.ini

COPY docker/start-new-2.sh /var/www/start.sh

# 3️⃣ Cron setup
COPY docker/job-cron /etc/cron.d/job-cron
COPY docker/cron-minute.sh /var/www/cron-minute.sh
RUN chmod 0644 /etc/cron.d/job-cron /var/www/cron-minute.sh \
 && dos2unix /etc/cron.d/job-cron /var/www/cron-minute.sh \
 && crontab /etc/cron.d/job-cron \
 && touch /var/log/cron.log && chmod 0777 /var/log/cron.log

# 4️⃣ Composer
COPY --from=composer:latest /usr/bin/composer /usr/local/bin/composer

# 5️⃣ Application setup
WORKDIR /var/www
COPY composer.json composer.lock ./
RUN composer install --no-interaction --no-scripts --no-autoloader
COPY . .

# 6️⃣ Final setup and permissions
RUN composer dump-autoload --optimize \
 && dos2unix /var/www/start.sh \
 && chown -R www-data:www-data /var/www /tmp \
 && git config --global --add safe.directory /var/www

CMD ["bash", "/var/www/start.sh"]