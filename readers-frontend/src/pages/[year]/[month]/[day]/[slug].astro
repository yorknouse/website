---
import {
  articleWithUserAndDraft,
  getAllArticles,
  getArticleImage,
} from "@components/utils/articles";
import { Icon } from "astro-icon";
import Layout from "src/layouts/Layout.astro";
import prisma from "src/prisma";

export async function getStaticPaths() {
  const dateFormatter = new Intl.DateTimeFormat("en-GB", {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
  });

  const articles = await getAllArticles();

  return articles.map((article) => {
    const date = article.articles_published || new Date(0);
    // DD/MM/YYYY
    const dateParts = dateFormatter.format(date).split("/");
    return {
      params: {
        year: dateParts[2],
        month: dateParts[1],
        day: dateParts[0],
        slug: article.articles_slug || "err",
      },
      props: {
        article,
      },
    };
  });
}

interface Props {
  article: articleWithUserAndDraft;
}

const { article } = Astro.props;
const topCategory = article.categories[0].category;
const parentCategory =
  article.categories[article.categories.length - 1].category;
const articleDraft = article.articlesDrafts[0];
const imageUrl = await getArticleImage(article);

let formattedUser = {
  name: `${articleDraft.users?.users_name1} ${articleDraft.users?.users_name2}`,
  positions: `${await articleDraft.users?.userPositions.reduce(
    async (accumulatorPromise, userPosition) => {
      let accumulator = await accumulatorPromise;
      // Only show position if still current
      if (
        !userPosition.userPositions_end ||
        userPosition.userPositions_end.getTime() > new Date().getTime()
      ) {
        if (userPosition.positions_id) {
          const position = await prisma.positions.findFirst({
            where: {
              positions_id: userPosition.positions_id,
            },
          });
          accumulator += position?.positions_displayName || "";
          accumulator += " ";
        }
      }
      return accumulator;
    },
    Promise.resolve("")
  )}`,
};
---

<Layout
  style={topCategory.categories_id === 4 ? "muse" : "nouse"}
  active={parentCategory.categories_name}
  title={`${articleDraft.articlesDrafts_headline} - Nouse`}
>
  <main>
    <div class="flex flex-col px-[3%] pt-8 text-base sm:px-[0.5%] 2xl:px-[13%]">
      <div class="flex flex-col md:flex-row">
        {/* Article */}
        <div class="flex w-full flex-col gap-3 md:w-2/3">
          <h1 class="text-2xl font-bold sm:text-3xl md:text-4xl lg:text-6xl">
            {article.articlesDrafts[0].articlesDrafts_headline}
          </h1>
          {
            article.articles_published && (
              <div class="flex flex-row font-semibold">
                <Icon
                  name="ic:baseline-access-time-filled"
                  class="my-auto mr-1 h-4 w-4"
                />
                <p class="my-auto">
                  {article.articles_published.toLocaleDateString()}
                </p>
              </div>
            )
          }
          <h3>{article.articlesDrafts[0].articlesDrafts_excerpt}</h3>
          {
            article.articles_isThumbnailPortrait ? (
              <img
                class="max-w-1/2 mx-auto aspect-portrait-video rounded-lg object-cover"
                src={imageUrl}
              />
            ) : (
              <img
                class="aspect-video rounded-lg object-cover"
                src={imageUrl}
              />
            )
          }
          <div class="relative h-5">
            <div
              class={`absolute top-0 left-0 border-l-[5px] h-full border-color-${parentCategory.categories_name}`}
            >
            </div>
            <p class={`ml-2 category-color-${parentCategory.categories_name}`}>
              Image by {
                article.articlesDrafts[0].articlesDrafts_thumbnailCredit
              }
            </p>
          </div>
          <p class="text-xl italic">
            <span class={`category-color-${parentCategory.categories_name}`}
              >By
            </span>{formattedUser.name}{
              formattedUser.positions.length > 0 &&
                ` - ${formattedUser.positions}`
            }
          </p>
          <div
            class="text-justify"
            set:html={articleDraft.articlesDrafts_text}
          />
        </div>
        {/* Top Articles */}
        <div class="flex w-full flex-col md:w-1/3"></div>
      </div>
    </div>
  </main>
</Layout>

<script>
  const cookies = document.cookie.split(";");
  const readArticles = [];
</script>
