---
import Article from "@components/Article.astro";
import FeaturedArticles from "@components/FeaturedArticles.astro";
import FeaturedSection from "@components/FeaturedSection.astro";
import Paginator from "@components/SolidJS/Paginator";
import {
  categoriesWithArticles,
  getCategoriesWithArticles,
  paginateCategory,
} from "@components/utils/categories";
import Layout from "src/layouts/Layout.astro";
import NavbarColourSwitcher from "@components/NavbarColourSwitcher.astro";
import ArticleRows from "@components/ArticleRows.astro";

export async function getStaticPaths() {
  const articlesPerPage = 30;

  // Getting the nouse top level categories for example: news, politics, etc.
  const nouseTopLevelCategories: categoriesWithArticles[] =
    await getCategoriesWithArticles(null);

  // Getting the muse top level categories for example: arts, features, etc.
  const museTopLevelCategories: categoriesWithArticles[] =
    await getCategoriesWithArticles(4);
  const topLevelCategories = [
    ...nouseTopLevelCategories,
    ...museTopLevelCategories,
  ];
  const paginatedResults = await Promise.all(
    topLevelCategories.map(async (topLevelCategory) => {
      // Getting the subcategories for example: campus news, arts features, etc.
      const subCategories: categoriesWithArticles[] =
        await getCategoriesWithArticles(topLevelCategory.categories_id);

      let paginatedTopCategory;
      if (topLevelCategory.categories_nestUnder === 4) {
        // We want to nest the muse categories under muse
        paginatedTopCategory = paginateCategory(
          topLevelCategory,
          articlesPerPage,
          "muse",
          topLevelCategory.categories_name
        );
      } else {
        paginatedTopCategory = paginateCategory(
          topLevelCategory,
          articlesPerPage,
          topLevelCategory.categories_name
        );
      }
      // We don't want to paginate the muse sub categories as they will be paginated using museTopLevelCategories
      if (
        subCategories.length === 0 ||
        topLevelCategory.categories_name === "muse"
      ) {
        return paginatedTopCategory;
      }

      const paginatedSubCategories = await Promise.all(
        subCategories.map(async (subCategory) => {
          if (topLevelCategory.categories_nestUnder === 4) {
            // We want to nest the subcategories for the muse categories under muse
            return paginateCategory(
              subCategory,
              articlesPerPage,
              `muse`,
              `${topLevelCategory.categories_name}/${subCategory.categories_name}`
            );
          } else {
            return paginateCategory(
              subCategory,
              articlesPerPage,
              topLevelCategory.categories_name,
              subCategory.categories_name
            );
          }
        })
      );
      return [...paginatedTopCategory.flat(), ...paginatedSubCategories.flat()];
    })
  );
  return paginatedResults.flat();
}

const { page, title, category, style, paginatorPrefix } = Astro.props;

// Getting the featured article ids for
const featuredArticlesIds = category.categories_featured
  ?.split(",")
  .map(Number);

// Getting the featured section for the muse homepage
let museCategories: categoriesWithArticles[] = [];
if (category.categories_name === "muse" && page.currentPage === 0) {
  museCategories = await getCategoriesWithArticles(4);
}
---

<Layout
  title={`${title} - Nouse`}
  active={category.categories_name}
  style={style}
>
  <div class="px-[3%] pt-8 sm:px-[0.5%] 2xl:px-[13%]">
    {/* Mobile Header */}
    {
      category.categories_name !== "muse" && (
        <h1 id="mobile-header" class="block text-center text-2xl sm:hidden">
          {category.categories_displayName}
        </h1>
      )
    }
    {
      featuredArticlesIds !== undefined && (
        <>
          <div id="featured-articles">
            <FeaturedArticles
              featuredArticlesIds={featuredArticlesIds}
              hideCategoryAccent={category.categories_name !== "muse"}
              style={style}
            />
          </div>
          {!(category.categories_name === "muse" && page.currentPage === 0) &&
            page.data && (
              <hr class="my-2.5 w-full self-center border-gray-300" />
            )}
        </>
      )
    }
    {
      !(category.categories_name === "muse" && page.currentPage === 0) ? (
        <>
          {page.data && (
            <div id="article-list">
              <ArticleRows articles={page.data} parentCategory={category} style="nouse" hideCategoryAccent={true}></ArticleRows>
            </div>
          )}
        </>
      ) : (
        <>
          <div class="featured-sections">
            {museCategories.map((category) => (
              <div id={`${category.categories_name}-section`}>
                <FeaturedSection category={category} />
              </div>
            ))}
          </div>
        </>
      )
    }
  </div>
  <div class="my-4 w-full" id="paginator-container">
    <Paginator
      client:only
      page={page.currentPage}
      pages={page.total}
      pagesToDisplay={5}
      prefix={paginatorPrefix}
    />
  </div>
  <NavbarColourSwitcher featuredCategories={museCategories} style={"muse"} />
</Layout>
