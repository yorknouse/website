---
import Article from "@components/Article.astro";
import FeaturedArticles from "@components/FeaturedArticles.astro";
import FeaturedSection from "@components/FeaturedSection.astro";
import Paginator from "@components/SolidJS/Paginator";
import {
  categoriesWithArticles,
  getCategoriesWithArticles,
  paginateCategory,
} from "@components/utils/categories";
import Layout from "src/layouts/Layout.astro";
import {
  articlesWithArticleDrafts,
  getArticleImage,
} from "../../components/utils/articles";
import prisma from "src/prisma";

export async function getStaticPaths() {
  const articlePerPage = 30;

  // Getting the nouse top level categories for example: news, politics, etc.
  const nouseTopLevelCategories: categoriesWithArticles[] =
    await getCategoriesWithArticles(null);

  // Getting the muse top level categories for example: arts, features, etc.
  const museTopLevelCategories: categoriesWithArticles[] =
    await getCategoriesWithArticles(4);
  const topLevelCategories = [
    ...nouseTopLevelCategories,
    ...museTopLevelCategories,
  ];
  const paginatedResults = await Promise.all(
    topLevelCategories.map(async (topLevelCategory) => {
      // Getting the subcategories for example: campus news, arts features, etc.
      const subCategories: categoriesWithArticles[] =
        await getCategoriesWithArticles(topLevelCategory.categories_id);

      let paginatedTopCategory;
      if (topLevelCategory.categories_nestUnder === 4) {
        // We want to nest the muse categories under muse
        paginatedTopCategory = paginateCategory(
          topLevelCategory,
          articlePerPage,
          "muse",
          topLevelCategory.categories_name
        );
      } else {
        paginatedTopCategory = paginateCategory(
          topLevelCategory,
          articlePerPage,
          topLevelCategory.categories_name
        );
      }
      // We don't want to paginate the muse sub categories as they will be paginated using museTopLevelCategories
      if (
        subCategories.length === 0 ||
        topLevelCategory.categories_name === "muse"
      ) {
        return paginatedTopCategory;
      }

      const paginatedSubCategories = await Promise.all(
        subCategories.map(async (subCategory) => {
          if (topLevelCategory.categories_nestUnder === 4) {
            // We want to nest the subcategories for the muse categories under muse
            return paginateCategory(
              subCategory,
              articlePerPage,
              `muse`,
              `${topLevelCategory.categories_name}/${subCategory.categories_name}`
            );
          } else {
            return paginateCategory(
              subCategory,
              articlePerPage,
              topLevelCategory.categories_name,
              subCategory.categories_name
            );
          }
        })
      );
      return [...paginatedTopCategory.flat(), ...paginatedSubCategories.flat()];
    })
  );
  return paginatedResults.flat();
}

const { page, title, category, style, paginatorPrefix } = Astro.props;

// Getting the featured article ids for
const featuredArticlesIds = category.categories_featured
  ?.split(",")
  .map(Number);

// Getting the featured section for the muse homepage
let museCategories: categoriesWithArticles[] = [];
if (category.categories_name === "muse" && page.currentPage === 0) {
  museCategories = await getCategoriesWithArticles(4);
}

// A simplified category list for the script tag
const scrollCategories = museCategories.map((category) => {
  return {
    categories_name: category.categories_name,
    categories_backgroundColor: category.categories_backgroundColor,
  };
});
---

<Layout
  title={`${title} - Nouse`}
  active={category.categories_name}
  style={style}
>
  <div class="px-[3%] pt-8 sm:px-[0.5%] 2xl:px-[13%]">
    {/* Mobile Header */}
    {
      category.categories_name !== "muse" && (
        <h1 id="mobile-header" class="block text-center text-2xl sm:hidden">
          {category.categories_displayName}
        </h1>
      )
    }
    {
      featuredArticlesIds !== undefined && (
        <>
          <div id="featured-articles">
            <FeaturedArticles
              featuredArticlesIds={featuredArticlesIds}
              hideCategoryAccent={category.categories_name !== "muse"}
              style={style}
            />
          </div>
          {!(category.categories_name === "muse" && page.currentPage === 0) &&
            page.data && (
              <hr class="my-2.5 w-full self-center border-[1px] border-gray-300" />
            )}
        </>
      )
    }
    {
      !(category.categories_name === "muse" && page.currentPage === 0) ? (
        <>
          {page.data && (
            <div id="article-list">
              {/* Desktop */}
              <div class="hidden max-w-full flex-col sm:flex">
                {page.data
                  .reduce(
                    (
                      accumulator: articlesWithArticleDrafts[][],
                      currentValue: any,
                      currentIndex: number,
                      array: articlesWithArticleDrafts[]
                    ) => {
                      if (currentIndex % 2 === 0) {
                        accumulator.push(
                          array.slice(currentIndex, currentIndex + 2)
                        );
                      }
                      return accumulator;
                    },
                    []
                  )
                  .map(
                    async (
                      articles: articlesWithArticleDrafts[],
                      index: number
                    ) => {
                      return (
                        <div>
                          <div class="flex max-h-52 max-w-full gap-2.5">
                            <div
                              class={`w-1/2 pr-2.5 ${
                                articles[1] && "border-r-2 border-gray-300"
                              }`}
                            >
                              <Article
                                headline={
                                  articles[0].articlesDrafts[0]
                                    .articlesDrafts_headline
                                }
                                excerpt={
                                  articles[0].articlesDrafts[0]
                                    .articlesDrafts_excerpt
                                }
                                author={
                                  articles[0].articlesDrafts[0].users
                                    ?.users_name1 +
                                  " " +
                                  articles[0].articlesDrafts[0].users
                                    ?.users_name2
                                }
                                authorId={
                                  articles[0].articlesDrafts[0].users
                                    ?.users_userid
                                }
                                category={category?.categories_displayName}
                                categoryLink={category?.categories_name}
                                categoryColor={
                                  category?.categories_backgroundColor
                                }
                                imageUrl={await getArticleImage(articles[0])}
                                articleUrl={`/${articles[0].articles_published
                                  ?.toISOString()
                                  .substring(0, 10)
                                  .replaceAll("-", "/")}/${
                                  articles[0].articles_slug
                                }`}
                                isVertical={false}
                                isPortrait={false}
                                hideCategoryAccent={true}
                              />
                            </div>
                            {articles[1] && (
                              <div class="w-1/2">
                                <Article
                                  headline={
                                    articles[1].articlesDrafts[0]
                                      .articlesDrafts_headline
                                  }
                                  excerpt={
                                    articles[1].articlesDrafts[0]
                                      .articlesDrafts_excerpt
                                  }
                                  author={
                                    articles[1].articlesDrafts[0].users
                                      ?.users_name1 +
                                    " " +
                                    articles[1].articlesDrafts[0].users
                                      ?.users_name2
                                  }
                                  authorId={
                                    articles[1].articlesDrafts[0].users
                                      ?.users_userid
                                  }
                                  category={category?.categories_displayName}
                                  categoryLink={category?.categories_name}
                                  categoryColor={
                                    category?.categories_backgroundColor
                                  }
                                  imageUrl={await getArticleImage(articles[1])}
                                  articleUrl={`/${articles[1].articles_published
                                    ?.toISOString()
                                    .substring(0, 10)
                                    .replaceAll("-", "/")}/${
                                    articles[1].articles_slug
                                  }`}
                                  isVertical={false}
                                  isPortrait={false}
                                  hideCategoryAccent={true}
                                />
                              </div>
                            )}
                          </div>

                          {index !=
                            (0 || Math.ceil(page.data.length / 2) - 1) && (
                            <hr class="my-2.5 w-full self-center border-[1px] border-gray-300" />
                          )}
                        </div>
                      );
                    }
                  )}
              </div>
              {/* Mobile */}
              <div class="block max-w-full justify-center sm:hidden">
                {page.data.map(
                  async (article: articlesWithArticleDrafts, index: number) => {
                    return (
                      <div
                        class={`w-full p-2.5 ${
                          index != page.data.length - 1
                            ? "border-b-2 border-gray-300"
                            : ""
                        }`}
                      >
                        <Article
                          headline={
                            article.articlesDrafts[0].articlesDrafts_headline
                          }
                          excerpt={
                            article.articlesDrafts[0].articlesDrafts_excerpt
                          }
                          author={
                            article.articlesDrafts[0].users?.users_name1 +
                            " " +
                            article.articlesDrafts[0].users?.users_name2
                          }
                          authorId={
                            article.articlesDrafts[0].users?.users_userid
                          }
                          category={category.categories_displayName}
                          categoryLink={category.categories_name}
                          categoryColor={category.categories_backgroundColor}
                          imageUrl={await getArticleImage(article)}
                          articleUrl={`/${article.articles_published
                            ?.toISOString()
                            .substring(0, 10)
                            .replaceAll("-", "/")}/${article.articles_slug}`}
                          isVertical={false}
                          isPortrait={article.articles_isThumbnailPortrait}
                          hideCategoryAccent={true}
                        />
                      </div>
                    );
                  }
                )}
              </div>
            </div>
          )}
        </>
      ) : (
        <>
          <div class="featured-sections">
            {museCategories.map((category) => (
              <div id={`${category.categories_name}-section`}>
                <FeaturedSection category={category} />
              </div>
            ))}
          </div>
        </>
      )
    }
  </div>
  <div class="my-4 w-full" id="paginator-container">
    <Paginator
      client:only
      page={page.currentPage}
      pages={page.total}
      pagesToDisplay={5}
      prefix={paginatorPrefix}
    />
  </div>
</Layout>

<script
  define:vars={{ scrollCategories }}
>
  const nav = document.querySelector("nav");
  window.onscroll = function () {
    scrollCategories.forEach((category) => {
      document.getElementById(`${category.categories_name}-section`);
      if (
        window.pageYOffset >=
        document.getElementById(`${category.categories_name}-section`)
          .offsetTop -
          50
      ) {
        nav.style.setProperty(
          "--computedBaseColour",
          category.categories_backgroundColor
        );
      } else if (
        window.pageYOffset <
        document.querySelector(".featured-sections div:nth-child(1)")
          .offsetTop -
          50
      ) {
        nav.style.setProperty("--computedBaseColour", "#000");
      }
    });
  };
</script>
