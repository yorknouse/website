---
import Article from "@components/Article.astro";
import FeaturedArticles from "@components/FeaturedArticles.astro";
import FeaturedSection from "@components/FeaturedSection.astro";
import Paginator from "@components/SolidJS/Paginator";
import {
  categoriesWithArticles,
  getCategories,
  paginateCategory,
} from "@components/utils/categories";
import Layout from "src/layouts/Layout.astro";
import {
  articlesWithArticleDrafts,
  getArticleImage,
} from "../../components/utils/articles";

export async function getStaticPaths() {
  const articlePerPage = 30;
  const nouseTopLevelCategories: categoriesWithArticles[] = await getCategories(
    null
  );
  const museTopLevelCategories: categoriesWithArticles[] = await getCategories(
    4
  );
  const topLevelCategories = [
    ...nouseTopLevelCategories,
    ...museTopLevelCategories,
  ];
  const paginatedResults = await Promise.all(
    topLevelCategories.map(async (topLevelCategory) => {
      const subCategories: categoriesWithArticles[] = await getCategories(
        topLevelCategory.categories_id
      );
      let paginatedTopCategory;
      if (topLevelCategory.categories_nestUnder === 4) {
        paginatedTopCategory = paginateCategory(
          topLevelCategory,
          articlePerPage,
          "muse",
          topLevelCategory.categories_name
        );
      } else {
        paginatedTopCategory = paginateCategory(
          topLevelCategory,
          articlePerPage,
          topLevelCategory.categories_name
        );
      }
      // We don't want to paginate the muse sub categories as they will be paginated using museTopLevelCategories
      if (
        subCategories.length === 0 ||
        topLevelCategory.categories_name === "muse"
      ) {
        return paginatedTopCategory;
      }
      const paginatedSubCategories = await Promise.all(
        subCategories.map(async (subCategory) => {
          if (topLevelCategory.categories_nestUnder === 4) {
            return paginateCategory(
              subCategory,
              articlePerPage,
              `muse`,
              `${topLevelCategory.categories_name}/${subCategory.categories_name}`
            );
          } else {
            return paginateCategory(
              subCategory,
              articlePerPage,
              topLevelCategory.categories_name,
              subCategory.categories_name
            );
          }
        })
      );
      return [...paginatedTopCategory.flat(), ...paginatedSubCategories.flat()];
    })
  );
  return paginatedResults.flat();
}

const { page, title, category, style, paginatorPrefix } = Astro.props;
const featuredArticlesIds = category.categories_featured
  ?.split(",")
  .map(Number);
let museCategories: categoriesWithArticles[] = [];
if (category.categories_name === "muse" && page.currentPage === 0) {
  museCategories = await getCategories(4);
}
---

<Layout
  title={`${title} - Nouse`}
  active={category.categories_name}
  style={style}
>
  <div class="px-[3%] pt-8 sm:px-[0.5%] 2xl:px-[13%]">
    {
      featuredArticlesIds !== undefined && (
        <>
          <div class="featured-articles">
            <FeaturedArticles
              featuredArticlesIds={featuredArticlesIds}
              hideCategoryAccent={category.categories_name !== "muse"}
              style={style}
            />
          </div>
          {!(category.categories_name === "muse" && page.currentPage === 0) && (
            <hr class="my-2.5 w-full self-center border-[1px] border-gray-300" />
          )}
        </>
      )
    }
    {
      !(category.categories_name === "muse" && page.currentPage === 0) ? (
        <>
          {/* Desktop */}
          <div class="hidden max-w-full flex-col sm:flex">
            {page.data
              .reduce(
                (
                  accumulator: articlesWithArticleDrafts[][],
                  currentValue: any,
                  currentIndex: number,
                  array: articlesWithArticleDrafts[]
                ) => {
                  if (currentIndex % 2 === 0) {
                    accumulator.push(
                      array.slice(currentIndex, currentIndex + 2)
                    );
                  }
                  return accumulator;
                },
                []
              )
              .map(
                async (
                  articles: articlesWithArticleDrafts[],
                  index: number
                ) => {
                  return (
                    <div>
                      <div class="flex max-h-52 max-w-full gap-2.5">
                        <div
                          class={`w-1/2 pr-2.5 ${
                            articles[1] && "border-r-2 border-gray-300"
                          }`}
                        >
                          <Article
                            headline={
                              articles[0].articlesDrafts[0]
                                .articlesDrafts_headline
                            }
                            excerpt={
                              articles[0].articlesDrafts[0]
                                .articlesDrafts_excerpt
                            }
                            author={
                              articles[0].articlesDrafts[0].users?.users_name1 +
                              " " +
                              articles[0].articlesDrafts[0].users?.users_name2
                            }
                            authorId={
                              articles[0].articlesDrafts[0].users?.users_userid
                            }
                            category={category?.categories_displayName}
                            categoryLink={category?.categories_name}
                            categoryColor={category?.categories_backgroundColor}
                            imageUrl={await getArticleImage(articles[0])}
                            articleUrl={`/${articles[0].articles_published
                              ?.toISOString()
                              .substring(0, 10)
                              .replaceAll("-", "/")}/${
                              articles[0].articles_slug
                            }`}
                            isVertical={false}
                            isPortrait={false}
                            hideCategoryAccent={true}
                          />
                        </div>
                        {articles[1] && (
                          <div class="w-1/2">
                            <Article
                              headline={
                                articles[1].articlesDrafts[0]
                                  .articlesDrafts_headline
                              }
                              excerpt={
                                articles[1].articlesDrafts[0]
                                  .articlesDrafts_excerpt
                              }
                              author={
                                articles[1].articlesDrafts[0].users
                                  ?.users_name1 +
                                " " +
                                articles[1].articlesDrafts[0].users?.users_name2
                              }
                              authorId={
                                articles[1].articlesDrafts[0].users
                                  ?.users_userid
                              }
                              category={category?.categories_displayName}
                              categoryLink={category?.categories_name}
                              categoryColor={
                                category?.categories_backgroundColor
                              }
                              imageUrl={await getArticleImage(articles[1])}
                              articleUrl={`/${articles[1].articles_published
                                ?.toISOString()
                                .substring(0, 10)
                                .replaceAll("-", "/")}/${
                                articles[1].articles_slug
                              }`}
                              isVertical={false}
                              isPortrait={false}
                              hideCategoryAccent={true}
                            />
                          </div>
                        )}
                      </div>

                      {index != (0 || Math.ceil(page.data.length / 2) - 1) && (
                        <hr class="my-2.5 w-full self-center border-[1px] border-gray-300" />
                      )}
                    </div>
                  );
                }
              )}
          </div>
          {/* Mobile */}
          <div class="block max-w-full justify-center sm:hidden">
            {page.data.map(
              async (article: articlesWithArticleDrafts, index: number) => {
                return (
                  <div
                    class={`w-full p-2.5 ${
                      index != page.data.length - 1
                        ? "border-b-2 border-gray-300"
                        : ""
                    }`}
                  >
                    <Article
                      headline={
                        article.articlesDrafts[0].articlesDrafts_headline
                      }
                      excerpt={article.articlesDrafts[0].articlesDrafts_excerpt}
                      author={
                        article.articlesDrafts[0].users?.users_name1 +
                        " " +
                        article.articlesDrafts[0].users?.users_name2
                      }
                      authorId={article.articlesDrafts[0].users?.users_userid}
                      category={category.categories_displayName}
                      categoryLink={category.categories_name}
                      categoryColor={category.categories_backgroundColor}
                      imageUrl={await getArticleImage(article)}
                      articleUrl={`/${article.articles_published
                        ?.toISOString()
                        .substring(0, 10)
                        .replaceAll("-", "/")}/${article.articles_slug}`}
                      isVertical={false}
                      isPortrait={article.articles_isThumbnailPortrait}
                      hideCategoryAccent={true}
                    />
                  </div>
                );
              }
            )}
          </div>
        </>
      ) : (
        museCategories.map((category) => (
          <div id={`${category.categories_name}-section`}>
            <FeaturedSection category={category} />
          </div>
        ))
      )
    }
  </div>
  <div class="my-4 w-full" id="paginator_container">
    <Paginator
      client:only
      page={page.currentPage}
      pages={page.total}
      pagesToDisplay={5}
      prefix={paginatorPrefix}
    />
  </div>
</Layout>
