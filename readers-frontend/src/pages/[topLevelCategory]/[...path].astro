---
import FeaturedArticles from "@components/FeaturedArticles.astro";
import FeaturedSection from "@components/FeaturedSection.astro";
import Paginator from "@components/SolidJS/Paginator";
import {
  getCategoriesWithArticles,
} from "@components/utils/categories";
import Layout from "src/layouts/Layout.astro";
import NavbarColourSwitcher from "@components/NavbarColourSwitcher.astro";
import ArticleRows from "@components/ArticleRows.astro";
import type { ArticleCategory } from "@components/types";
import { getCategoryLink } from "@components/utils/categories";
import type { ICategoryArticles } from "@components/types";

const { topLevelCategory, path } = Astro.params;
const cleanPath = path ? decodeURIComponent(path) : undefined;

// Getting the category name and page number
let categoryName: string | undefined;
let pageNumber: number = 0;
let paginatorPrefix: string | undefined;
// if the path is undefined, then the category is the top level category for example /news
if (cleanPath === undefined) {
  categoryName = topLevelCategory;
  paginatorPrefix = topLevelCategory;
} else {
  const pathComponents = cleanPath.split("/");
  // If the last component is a number for example, then it's a page number
  // For example /news/2 or /news/campus-news/2 Otherwise, it's a category name for example /news/campus-news
  if (
    !Number.isNaN(Number.parseInt(pathComponents[pathComponents.length - 1]))
  ) {
    // If there's only one component, then it's the category is the topLevelCategory
    // For example, /news/2. Otherwise, it's the second to last component for example /news/campus-news/2
    if (pathComponents.length === 1) {
      categoryName = topLevelCategory;
      paginatorPrefix = topLevelCategory;
    } else {
      categoryName = pathComponents[pathComponents.length - 2];
      paginatorPrefix = `${topLevelCategory}/${pathComponents
        .slice(0, pathComponents.length - 1)
        .join("/")}`;
    }
    pageNumber = Number.parseInt(pathComponents[pathComponents.length - 1]);
  } else {
    categoryName = pathComponents[pathComponents.length - 1];
    paginatorPrefix = `${topLevelCategory}/${pathComponents.join("/")}`;
  }
}

// Redirecting to 404 if the page number is 1 as we paginate from 0
if (pageNumber === 1 || categoryName === undefined) {
  return Astro.redirect("/404");
} else if (pageNumber > 1) {
  pageNumber -= 1;
}

const articlesPerPage = 30; // Number of articles per page
const isMuseLandingPage = categoryName === "muse" && pageNumber === 0; // Whether the page is the muse landing page
const articlesSkipped = isMuseLandingPage // Number of articles to skip
  ? 0
  : categoryName === "muse"
  ? (pageNumber - 1) * articlesPerPage
  : pageNumber * articlesPerPage;

const apiBase = import.meta.env.PUBLIC_API_BASE_URL;

let res = await fetch(`${apiBase}/api/frontend/categoryFeaturedAndCount/${categoryName}`);
const categoryFeaturedAndCount: {
    _count: {
        articles: number
    }
    categories_featured: string | null
} | null = await res.json();

// Getting the featured article ids
const featuredArticlesIds =
  categoryFeaturedAndCount?.categories_featured &&
  categoryFeaturedAndCount.categories_featured !== ""
    ? categoryFeaturedAndCount.categories_featured.split(",").map(Number)
    : [];

// Redirecting to 404 if the category doesn't exist
// Or if there are no articles to display and the page number isn't 0
// Note: the second condition allows us to show landing pages for categories with no articles
if (
  !categoryFeaturedAndCount ||
  (categoryFeaturedAndCount._count.articles -
    (articlesSkipped + featuredArticlesIds.length) <=
    0 &&
    pageNumber !== 0)
)
  return Astro.redirect("/404");

const formData = new FormData();
formData.append("categoryName", categoryName);
formData.append("take", String(isMuseLandingPage ? 0 : articlesPerPage))
formData.append("skip", String(articlesSkipped))
formData.append("notInFeatured", String(featuredArticlesIds))

res = await fetch(`${apiBase}/api/frontend/categoryArticlesPath`, {
    method: "POST",
    body: formData,
});

// const category: {
//     articles: {
//         article: {
//             articlesDrafts: {
//                 articles_id: number | null
//                 articlesDrafts_timestamp: Date
//                 articlesDrafts_id: number
//                 articlesDrafts_userid: number | null
//                 articlesDrafts_headline: string
//                 articlesDrafts_excerpt: string | null
//                 articlesDrafts_changelog: string | null
//                 articlesDrafts_thumbnailCredit: string | null
//             }[]
//             categories: {}[]
//             users: {
//                 users: {
//                     users_userid: number
//                     users_name1: string | null
//                     users_name2: string | null
//                 }
//             }[]
//             articles_published: Date | null
//             articles_slug: string | null
//             articles_thumbnail: string | null
//             articles_isThumbnailPortrait: boolean
//             articles_type: number
//             articles_displayImages: boolean | null
//         }
//     }[],
//     categories_id: number
//     categories_nestUnder: number | null
//     categories_name: string
//     categories_displayName: string | null
//     categories_backgroundColor: string | null
// } | null = await res.json()

const category: ICategoryArticles = await res.json();

// Redirecting to 404 if the category doesn't exist or if there are no articles to show
if (!category) return Astro.redirect("/404");

// Getting the style for the category
const style =
  category.categories_nestUnder === 4 ||
  topLevelCategory === "muse" ||
  category.categories_name === "muse"
    ? "muse"
    : "nouse";

// Getting the featured section for the muse homepage
let museCategories: ICategoryArticles[] = [];
if (isMuseLandingPage) {
  museCategories = await getCategoriesWithArticles(4);
}

const cat: ArticleCategory = {
    id: category.categories_id,
    name: category.categories_name,
    displayName: category.categories_displayName,
    colour: category.categories_backgroundColor,
    link: getCategoryLink(
        String(category.categories_name),
        Number(category.categories_nestUnder)
    ),
    nestUnder: Number(category.categories_nestUnder)
};

// const articles = await Promise.all(category.articles!.map(async ({ article }) => {
//     const res = await fetch(`${apiBase}/api/s3url?fileId=${article.articles_thumbnail}&size=small`);
//     const s3url: S3URL = await res.json();
//
//     const date = new Date(article.articles_published!);
//
//     const a: IArticleFull = {
//         id: Number(article.articlesDrafts[0].articles_id),
//         headline: article.articlesDrafts[0].articlesDrafts_headline?.length != 0
//             ? String(article.articlesDrafts[0].articlesDrafts_headline)
//             : "Unknown",
//         excerpt: article.articlesDrafts[0].articlesDrafts_excerpt?.length != 0
//             ? String(article.articlesDrafts[0].articlesDrafts_headline)
//             : "Unknown",
//         text: null,
//         articleURL: `${import.meta.env.BASE_URL}articles/${dateFormatter
//             .format(date) // split -> reverse -> join = DD/MM/YYYY -> YYYY/MM/DD
//             .split("/")
//             .reverse()
//             .join("/")}/${String(article.articles_slug)}`,
//         thumbnailURL: s3url.url,
//         isThumbnailPortrait: article.articles_isThumbnailPortrait,
//         thumbnailCredit: article.articlesDrafts[0].articlesDrafts_thumbnailCredit,
//         articleType: article.articles_type,
//         published: dateFormatter.format(date)
//             .split("/")
//             .reverse()
//             .join("/"),
//         parentCategory: cat,
//         categories: null,
//         authors: article.users.map(({ users }) => {
//             const author: ArticleAuthor = {
//                 users_userid: users.users_userid,
//                 users_name1: String(users.users_name1),
//                 users_name2: String(users.users_name2),
//             }
//
//             return author;
//         }),
//         similarArticles: null,
//         displayImages: Boolean(article.articles_displayImages),
//     }
//     return a;
// }))
---

<Layout
  title={`${category.categories_displayName} - Nouse`}
  active={category.categories_name}
  style={style}
>
  <div class="px-[3%] pt-8 sm:px-[0.5%] 2xl:px-[13%]">
    {/* Mobile Header */}
    {
      category.categories_name !== "muse" && (
        <h1 id="mobile-header" class="block text-center text-2xl sm:hidden">
          {category.categories_displayName}
        </h1>
      )
    }
    {
      featuredArticlesIds.length !== 0 && (
        <>
          <div id="featured-articles">
            <FeaturedArticles
              featuredArticlesIds={featuredArticlesIds}
              hideCategoryAccent={category.categories_name !== "muse"}
              style={style}
            />
          </div>
          {!isMuseLandingPage && (
            <hr class="my-2.5 w-full self-center border-gray-300" />
          )}
        </>
      )
    }
    {
      !isMuseLandingPage ? (
        <>
          <div id="article-list">
            <ArticleRows
              articles={category.articles!}
              hideCategoryAccent={true}
            />
          </div>
        </>
      ) : (
        <>
          <div class="featured-sections">
            {museCategories.map((category) => (
              <div id={`${category.categories_name}-section`}>
                  <FeaturedSection category={category} style={"muse"} />
              </div>
            ))}
          </div>
        </>
      )
    }
  </div>
  <div class="mt-4 w-full" id="paginator-container">
    <Paginator
      client:only
      page={pageNumber}
      pages={category.categories_name === "muse"
        ? Math.ceil(
            (categoryFeaturedAndCount._count.articles -
              featuredArticlesIds.length) /
              articlesPerPage
          ) + 1
        : Math.max(
            1,
            Math.ceil(
              categoryFeaturedAndCount._count.articles / articlesPerPage
            )
          )}
      pagesToDisplay={5}
      prefix={paginatorPrefix}
    />
  </div>
  <NavbarColourSwitcher featuredCategories={museCategories} style={"muse"} />
</Layout>
