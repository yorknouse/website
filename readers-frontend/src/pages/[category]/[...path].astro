---
import Article from "@components/Article.astro";
import FeaturedArticles from "@components/FeaturedArticles.astro";
import FeaturedSection from "@components/FeaturedSection.astro";
import Paginator from "@components/SolidJS/Paginator";
import {
  categoriesWithArticles,
  getCategories,
  paginateCategory,
} from "@components/utils/categories";
import Layout from "src/layouts/Layout.astro";
import {
  articlesWithArticleDrafts,
  getArticleImage,
} from "../../components/utils/articles";

export async function getStaticPaths() {
  const rowCount = 15;
  const nouseTopLevelCategories: categoriesWithArticles[] = await getCategories(
    null
  );
  const museTopLevelCategories: categoriesWithArticles[] = await getCategories(
    4
  );
  const topLevelCategories = [
    ...nouseTopLevelCategories,
    ...museTopLevelCategories,
  ];
  const paginatedResults = await Promise.all(
    topLevelCategories.map(async (topLevelCategory) => {
      const subCategories: categoriesWithArticles[] = await getCategories(
        topLevelCategory.categories_id
      );
      const paginatedTopCategory = paginateCategory(
        topLevelCategory,
        rowCount,
        topLevelCategory.categories_nestUnder === 4 ? "muse" : undefined
      );
      // We don't want to paginate the muse sub categories as they will be paginated using museTopLevelCategories
      if (
        subCategories.length === 0 ||
        topLevelCategory.categories_name === "muse"
      ) {
        return paginatedTopCategory;
      }
      const paginatedSubCategories = await Promise.all(
        subCategories.map(async (subCategory) => {
          return paginateCategory(subCategory, rowCount, topLevelCategory.categories_name);
        })
      );
      return [...paginatedTopCategory.flat(), ...paginatedSubCategories.flat()];
    })
  );
  return paginatedResults.flat();
}

const { page, title, category, style, paginatorPrefix } = Astro.props;
const featuredArticlesIds = category.categories_featured
  ?.split(",")
  .map(Number);
let museCategories: categoriesWithArticles[] = [];
if (category.categories_name === "muse") {
  museCategories = await getCategories(4);
}
---

<Layout
  title={`${title} - Nouse`}
  active={category.categories_name}
  style={style}
>
  <div class="px-[3%] pt-8 sm:px-[0.5%] 2xl:px-[13%]">
    {
      featuredArticlesIds !== undefined && (
        <>
          <div class="featured-articles">
            <FeaturedArticles
              featuredArticlesIds={featuredArticlesIds}
              hideCategoryAccent={category.categories_name !== "muse"}
              style={style}
            />
          </div>
          <hr class="my-2.5 w-full self-center border-[1px] border-gray-300" />
        </>
      )
    }
    { !(category.categories_name === "muse" && page.currentPage === 0) ?
      page.data.map(
        async (articles: articlesWithArticleDrafts[], index: number) => {
          return (
              <div class="flex max-h-52 max-w-full gap-2.5">
                <div
                  class={`w-1/2 pr-2.5 ${
                    articles[1] && "border-r-2 border-gray-300"
                  }`}
                >
                  <Article
                    headline={
                      articles[0].articlesDrafts[0].articlesDrafts_headline
                    }
                    excerpt={
                      articles[0].articlesDrafts[0].articlesDrafts_excerpt
                    }
                    author={
                      articles[0].articlesDrafts[0].users?.users_name1 +
                      " " +
                      articles[0].articlesDrafts[0].users?.users_name2
                    }
                    authorId={articles[0].articlesDrafts[0].users?.users_userid}
                    category={category?.categories_displayName}
                    categoryLink={category?.categories_name}
                    categoryColor={category?.categories_backgroundColor}
                    imageUrl={await getArticleImage(articles[0])}
                    articleUrl={`/${articles[0].articles_published
                      ?.toISOString()
                      .substring(0, 10)
                      .replaceAll("-", "/")}/${articles[0].articles_slug}`}
                    isVertical={false}
                    isPortrait={false}
                    hideCategoryAccent={true}
                  />
                </div>
                {articles[1] && (
                  <div class="w-1/2">
                    <Article
                      headline={
                        articles[1].articlesDrafts[0].articlesDrafts_headline
                      }
                      excerpt={
                        articles[1].articlesDrafts[0].articlesDrafts_excerpt
                      }
                      author={
                        articles[1].articlesDrafts[0].users?.users_name1 +
                        " " +
                        articles[1].articlesDrafts[0].users?.users_name2
                      }
                      authorId={
                        articles[1].articlesDrafts[0].users?.users_userid
                      }
                      category={category?.categories_displayName}
                      categoryLink={category?.categories_name}
                      categoryColor={category?.categories_backgroundColor}
                      imageUrl={await getArticleImage(articles[1])}
                      articleUrl={`/${articles[1].articles_published
                        ?.toISOString()
                        .substring(0, 10)
                        .replaceAll("-", "/")}/${articles[1].articles_slug}`}
                      isVertical={false}
                      isPortrait={false}
                      hideCategoryAccent={true}
                    />
                  </div>
                )}
              </div>
              <>
                {index != (0 || page.data.length - 1) && (
                  <hr class="my-2.5 w-full self-center border-[1px] border-gray-300" />
                )}
              </>
          );
        }
      )
      :
      
        museCategories.map((category) => (
          <div id={`${category.categories_name}-section`}>
            <FeaturedSection category={category} />
          </div>
        ))
      
    }
  </div>
  <div class="my-4 w-full" id="paginator_container">
    <Paginator client:only
      page={page.currentPage}
      pages={page.total}
      pagesToDisplay={5}
      prefix={paginatorPrefix}
    />
  </div>
</Layout>
