---
import Article from "@components/Article.astro";
import ArticleCookieManager from "@components/ArticleCookieManager.astro";
import TopArticles from "@components/SolidJS/TopArticles";
import {
  getArticleImage,
  getSimilarArticles,
} from "@components/utils/articles";
import { getParentCategory } from "@components/utils/categories";
import dateFormatter from "@components/utils/dateFormatter";
import { Icon } from "astro-icon";
import Layout from "src/layouts/Layout.astro";
import prisma from "src/prisma";
import crypto from "crypto";

const { year, month, day, slug } = Astro.params;

const cleanSlug = decodeURIComponent(slug || "");

const preview = Astro.url.searchParams.get("preview") != null;
const previewPostId = Astro.url.searchParams.get("post");
const previewPostHash = Astro.url.searchParams.get("key");
const isPreview = preview && previewPostId && previewPostHash;

const article = await prisma.articles.findFirst({
  where: {
    articles_showInLists: !isPreview,
    articles_slug: cleanSlug,
  },
  include: {
    articlesDrafts: {
      // Get the latest draft for every featured article
      orderBy: {
        articlesDrafts_timestamp: "desc",
      },
      take: 1,
    },
    categories: {
      include: {
        category: true,
      },
    },
    users: {
      include: { users: true },
    },
  },
});

if (!article) return Astro.redirect("/404");
if (isPreview) {
  const expectedHash = crypto
    .createHash("md5")
    .update(article.articles_id.toString())
    .digest("hex");
  if (expectedHash !== previewPostHash) return Astro.redirect("/404");
}

const parentCategory = getParentCategory(article.categories);
const parentCategoryId = parentCategory.categories_id;

const visibleCategories = article.categories.filter(
  (category) => category.category.categories_showPublic
);
const topCategory = visibleCategories[0].category;

const bottomCategory = visibleCategories[visibleCategories.length - 1].category;

const articleDraft = article.articlesDrafts[0];
const imageUrl = await getArticleImage(article);

const articleId = article.articles_id;

const unfilteredSimilarArticles = await getSimilarArticles(parentCategoryId);
const similarArticles = unfilteredSimilarArticles.filter(
  (similarArticle) => similarArticle.articles_id !== articleId
);

// We only want to display 4 similar articles.
// However, when querying the similar articles we get 5,
// so that we can filter the same article out as above.
// If the same article is not in the list, we truncate the list.
if (similarArticles.length > 4) similarArticles.pop();

let baseUrl = import.meta.env.BASE_URL;

baseUrl = baseUrl.slice(0, baseUrl.length - 1);

const apiAddress =
  import.meta.env.MODE === "production"
    ? process.env.LOCAL_DOCKER === "true"
      ? "http://localhost:420/api/topArticles.php"
      : "https://nouse.co.uk/api/topArticles.php"
    : "/api/topArticles.php";

const imagePlaceHolder =
  '"https://bbcdn.nouse.co.uk/file/nousePublicBackendUploads/db/webUploads/public/ARTICLE-THUMBNAIL/mWMFA4fY1ENg25x%20breakingNews_large.jpg"';
---

<Layout
  style={topCategory.categories_id === 4 ? "muse" : "nouse"}
  active={bottomCategory.categories_name}
  title={`${articleDraft.articlesDrafts_headline} - Nouse`}
>
  <main>
    <div class="flex flex-col px-[3%] pt-8 text-base sm:px-[0.5%] 2xl:px-[13%]">
      <div class="flex flex-col md:flex-row md:gap-10">
        {/* Article */}
        <div class="flex w-full flex-col gap-3 md:w-2/3">
          <h1
            class="text-2xl sm:text-3xl md:text-4xl lg:text-6xl"
            id="article-title"
          >
            {article.articlesDrafts[0].articlesDrafts_headline}
          </h1>
          {
            article.articles_published && (
              <div class="flex flex-row font-semibold">
                <Icon
                  name="ic:baseline-access-time-filled"
                  class="my-auto mr-1 h-4 w-4"
                />
                <p class="my-auto" id="article-timestamp">
                  {dateFormatter.format(article.articles_published)}
                </p>
              </div>
            )
          }
          <h3 id="article-excerpt">
            {article.articlesDrafts[0].articlesDrafts_excerpt}
          </h3>
          {
            article.articles_isThumbnailPortrait ? (
              <img
                id="article-image"
                class="max-w-1/2 mx-auto aspect-portrait-video rounded-lg object-cover"
                src={imageUrl}
                onerror={`if (this.src !== ${imagePlaceHolder}) this.src = ${imagePlaceHolder}`}
                alt="Article Image"
              />
            ) : (
              <img
                id="article-image"
                class="aspect-video rounded-lg object-cover"
                src={imageUrl}
                onerror={`if (this.src !== ${imagePlaceHolder}) this.src = ${imagePlaceHolder}`}
                alt="Article Image"
              />
            )
          }
          <div class="relative h-5">
            <div
              class={`absolute top-0 left-0 border-l-[5px] h-full border-color-${parentCategory.categories_name}`}
            >
            </div>
            <p
              class={`ml-2 category-color-${parentCategory.categories_name}`}
              id="article-credits"
            >
              Image by {
                article.articlesDrafts[0].articlesDrafts_thumbnailCredit
              }
            </p>
          </div>
          <p class="text-xl italic">
            <span class={`category-color-${parentCategory.categories_name}`}
              >By
            </span>
            {
              article.users
                .map((users) => users.users)
                .map((author, index) => {
                  if (index === 0) {
                    return (
                      <a
                        href={`${import.meta.env.BASE_URL}author/${
                          author.users_userid
                        }`}
                      >
                        {`${author.users_name1} ${author.users_name2}`}
                      </a>
                    );
                  } else if (index === article.users.length - 1) {
                    return (
                      <a
                        href={`${import.meta.env.BASE_URL}author/${
                          author.users_userid
                        }`}
                      >
                        {` and ${author.users_name1} ${author.users_name2}`}
                      </a>
                    );
                  } else {
                    return (
                      <a href={`/author/${author.users_userid}`}>
                        {`, ${author.users_name1} ${author.users_name2}`}
                      </a>
                    );
                  }
                })
            }
          </p>
          <div
            id="article-content"
            class="whitespace-pre-wrap text-justify"
            set:html={articleDraft.articlesDrafts_text}
          />
        </div>
        {/* Top Articles */}
        <div class="flex w-full flex-col md:w-1/3">
          <TopArticles client:only baseUrl={baseUrl} apiAddress={apiAddress} />
        </div>
      </div>
      {/* Similar Articles */}
      <div class="mt-10 border-t border-whiteish-200">
        <h3 class="block py-2 text-4xl">Similar Articles</h3>
        <div
          class="flex h-min flex-col md:flex-row"
          id="similar-articles-container"
        >
          {
            similarArticles.map(async (similarArticle, i) => (
              <div
                class={`mt-4 w-full border-b-whiteish-200 border-r-whiteish-200 pb-4 md:mt-0 md:max-w-[25%] md:pb-0 ${
                  i < similarArticles.length - 1
                    ? "border-b border-r-0 md:border-b-0 md:border-r"
                    : "border-0"
                } md:pr-4 ${i > 0 ? "md:ml-4" : "md:ml-0"}`}
              >
                <div class="h-min">
                  <Article
                    headline={
                      similarArticle.articlesDrafts[0].articlesDrafts_headline
                    }
                    excerpt={null}
                    authors={similarArticle.users.map((user) => user.users)}
                    category={undefined}
                    categoryLink={undefined}
                    categoryColor={
                      getParentCategory(similarArticle.categories)
                        .categories_backgroundColor
                    }
                    imageUrl={await getArticleImage(similarArticle)}
                    articleUrl={`${
                      import.meta.env.BASE_URL
                    }articles/${similarArticle.articles_published
                      ?.toISOString()
                      .substring(0, 10)
                      .replaceAll("-", "/")}/${similarArticle.articles_slug}`}
                    isVertical={true}
                    isPortrait={similarArticle.articles_isThumbnailPortrait}
                    hideCategoryAccent={true}
                  />
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </main>
  <ArticleCookieManager articleId={articleId} />
</Layout>
