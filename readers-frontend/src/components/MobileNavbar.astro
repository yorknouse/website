---
import type { categories } from "@prisma/client";
import { Icon } from "astro-icon";
import prisma from "src/prisma";

interface Props {
  active: string | undefined;
  style: "muse" | "nouse";
  menuCategories: categories[];
  baseUrl: string;
}

const { active, style, menuCategories, baseUrl } = Astro.props;

const activeCategory = active
  ? await prisma.categories.findFirst({
      where: {
        categories_name: active,
        AND: {
          categories_nestUnder: style === "muse" ? 4 : null,
        },
      },
    })
  : undefined;

// Default is whiteish-100 for nouse, black for muse
let computedBaseColour = activeCategory
  ? activeCategory.categories_backgroundColor
  : style === "muse"
  ? "000"
  : "F5EFEB";

if (computedBaseColour) {
  if (!computedBaseColour.includes("#"))
    computedBaseColour = "#" + computedBaseColour;
} else computedBaseColour = style === "muse" ? "#000" : "#F5EFEB";

// Whether to invert logo or not.
// Should be inverted for non-home nouse categories.
let invert =
  style === "nouse" &&
  activeCategory &&
  activeCategory.categories_name !== "home" &&
  activeCategory.categories_backgroundColor;

// Menu and Search icons colours
let textColour = "text-black";
if (style === "muse" || invert) {
  textColour = "text-white";
}
---

<header
  class={`bg-navbar flex w-full flex-row border-b-[1px] border-gray-300 h-20 md:hidden sticky top-0 z-40 ${textColour}`}
>
  <button class="my-auto ml-8 h-6 w-6" id="mobileNavMenuTgl">
    <div class="h-full w-full" id="menuIcn">
      <Icon name="ic:sharp-menu" class="w-full h-full" />
    </div>
    <div class="h-0 w-0" id="closeIcn">
      <Icon name="ic:sharp-close" class="w-full h-full" />
    </div>
  </button>
  <a href={baseUrl} class="mx-auto my-auto flex w-1/4">
    <img
      class={`mx-auto max-h-8 ${invert && "invert"}`}
      src={style === "nouse"
        ? "https://bbcdn.nouse.co.uk/file/nouseSiteAssets/logo/nouse-logo-print.svg"
        : "https://bbcdn.nouse.co.uk/file/nouseSiteAssets/logo/MUSE%20Logo%20White%20small.png"}
    />
  </a>
  <button
    class="searchBtnClassIdentifier my-auto mr-8 h-6 w-6"
    id="mobileSearchBtn"
  >
    <Icon name="ic:sharp-search" class="w-full h-full" />
  </button>
</header>
<nav
  class="fixed top-20 left-0 right-0 z-50 flex h-[calc(100dvh-80px)] -translate-x-full flex-col overflow-y-scroll bg-black transition-transform duration-500 ease-in-out"
  id="mobileNav"
>
  <ul
    class="mx-auto mb-10 w-5/6 list-none overflow-scroll text-2xl text-white"
    id="mobileNavList"
  >
    {
      menuCategories.map((menuItem) => (
        <li
          class={`flex w-full flex-row border-b-white py-7 ${
            active === menuItem.categories_name
              ? "border-b-[5px]"
              : "border-b-[1px]"
          }`}
        >
          <a
            class="mx-auto my-auto"
            href={
              menuItem.categories_displayName === "Home"
                ? baseUrl
                : menuItem.categories_displayName === "Nouse"
                ? import.meta.env.BASE_URL
                : `${baseUrl + menuItem.categories_name}`
            }
          >
            {() => {
              switch (menuItem.categories_displayName) {
                case "Muse":
                  return (
                    <img
                      src="https://bbcdn.nouse.co.uk/file/nouseSiteAssets/logo/MUSE%20Logo%20White%20small.png"
                      class="w-36"
                    />
                  );
                case "Nouse":
                  return (
                    <img
                      src="https://bbcdn.nouse.co.uk/file/nouseSiteAssets/logo/nouse-logo-print.svg"
                      class="w-36 invert"
                    />
                  );
                default:
                  return menuItem.categories_displayName;
              }
            }}
          </a>
        </li>
      ))
    }
  </ul>
</nav>

<style define:vars={{ computedBaseColour }}>
  .bg-navbar {
    background-color: var(--computedBaseColour);
  }
</style>

<script>
  const mobileNavMenuTgl = document.getElementById(
    "mobileNavMenuTgl"
  ) as HTMLButtonElement;
  const menuIcn = document.getElementById("menuIcn") as HTMLElement;
  const closeIcn = document.getElementById("closeIcn") as HTMLElement;
  const mobileNav = document.getElementById("mobileNav") as HTMLElement;
  const mobileNavList = document.getElementById(
    "mobileNavList"
  ) as HTMLUListElement;
  const mobileSearchBtn = document.getElementById(
    "mobileSearchBtn"
  ) as HTMLButtonElement;
  const body = document.body;

  const toggleClasses = () => {
    // Toggle navbar classes
    mobileNav.classList.toggle("-translate-x-full");

    menuIcn.classList.toggle("w-full");
    menuIcn.classList.toggle("w-0");
    menuIcn.classList.toggle("h-full");
    menuIcn.classList.toggle("h-0");

    closeIcn.classList.toggle("w-full");
    closeIcn.classList.toggle("w-0");
    closeIcn.classList.toggle("h-full");
    closeIcn.classList.toggle("h-0");

    // Toggle body scrolling
    body.classList.toggle("overflow-hidden");
  };

  mobileNavMenuTgl.addEventListener("click", () => toggleClasses());

  // Mutation observer for navbar visibility
  const mutationObserver = new MutationObserver((mutations) => {
    mutations.forEach((_) => {
      // Scroll nav to top if visible
      if (!mobileNav.classList.contains("-translate-x-full"))
        mobileNavList.scroll(0, 0);
    });
  });
  mutationObserver.observe(mobileNav, {
    attributes: true,
    attributeFilter: ["class"],
  });

  mobileSearchBtn.addEventListener("click", () => {
    if (!mobileNav.classList.contains("-translate-x-full")) toggleClasses();
  });
</script>
